sort1 uses: Bubble Sort

How do you know?:  Takes significantly less time to sort 'sorted50000.txt' (5.830s) as compared to 'reversed50000.txt' or 'random50000.txt'(>17s).
                   This is because for bubble sort, if all the elements are sorted, no elements need to be swapped and thus this is the best case scenario which is faster.
                   whereas if all the elements are reversed, the elements need to keep being swapped and thus the runtime will be much higher.

sort2 uses: Merge Sort

How do you know?: Takes the least average time (around 4s) compared to sort1(13s) and sort3(8s), as merge sort is the most efficient sorting method.

sort3 uses: Selection Sort

How do you know?: The amount of time taken is almost the same to sort 'reversed50000.txt'(7.4s) and 'sorted50000.txt'(10s), which proves it is either selection sort
                  or merge sort, but since sort2 takes much less time, sort3 must be selection sort.
